generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}


enum Gender {
  M
  F
  Unspecified
}

enum RSVP {
  accepted
  declined
  maybe
  no_response
}

enum EventType {
  Wedding
  Birthday
  Houseparty
  Travel
}

enum Language {
  English
  Hindi
}

enum Visibility {
  Public
  Private
}

model User {
  id                 String   @id @default(uuid())
  name               String
  dob                DateTime
  mobile_number      String   @unique
  email              String   @unique
  gender             Gender   @default(Unspecified)
  profile_pic        String?
  preferred_language Language @default(English)
  created_at         DateTime @default(now())

  // Relations
  hostedEvents   Event[] @relation("HostEvents")
  guestRecords   Guest[]
  coHostedEvents Event[] @relation("CoHostEvents")
}

model Event {
  id              String     @id @default(uuid())
  title           String
  type            EventType
  location        String
  address         String
  invite_message  String?
  image           String?
  visibility      Visibility @default(Private)
  created_at      DateTime   @default(now())
  start_date_time DateTime
  end_date_time   DateTime?
  bannerImage     String?

  hostId String
  host   User   @relation("HostEvents", fields: [hostId], references: [id])

  weddingDetails     WeddingEvent?
  birthdayDetails    BirthdayEvent?
  housePartyDetails  HousePartyEvent?
  travelDetails      TravelEvent?

  // Relations
  co_hosts   User[]     @relation("CoHostEvents")
  sub_events SubEvent[] @relation("ParentEvent")
  guests     Guest[]
  messages   Message[]
}

model WeddingEvent {
  id                 String   @id // This ID must match the Event's ID
  bride_name         String
  bride_details      String?
  groom_name         String
  groom_details      String?
  bride_groom_images String[]
  hashtag            String?

  // Relation back to the main Event
  event Event @relation(fields: [id], references: [id], onDelete: Cascade)
}

model BirthdayEvent {
  id           String  @id // This ID must match the Event's ID
  person_image String?
  hashtag      String?

  // Relation back to the main Event
  event Event @relation(fields: [id], references: [id], onDelete: Cascade)
}

model HousePartyEvent {
  id    String   @id // This ID must match the Event's ID
  cost  Float?   @default(0.0) // Optional cost for the house party
  rules String?
  terms String?
  tags  String[]

  // Relation back to the main Event
  event Event @relation(fields: [id], references: [id], onDelete: Cascade)
}

model TravelEvent {
  id                 String   @id // This ID must match the Event's ID
  cost               Float?   @default(0.0) // Optional cost for the house party
  terms              String?
  itinerary_included String[]
  itinerary_excluded String[]
  rules              String?
  tags               String[]

  // Relation back to the main Event
  event Event @relation(fields: [id], references: [id], onDelete: Cascade)
}

model SubEvent {
  id              String   @id @default(uuid())
  title           String
  location        String
  address         String
  invite_message  String?
  image           String?
  start_date_time DateTime
  end_date_time   DateTime
  event_id        String?

  parentEvent Event? @relation("ParentEvent", fields: [event_id], references: [id], onDelete: Cascade)

  guests   String[]
  messages String[]
}

model Guest {
  id            String  @id @default(uuid())
  rsvp          RSVP    @default(no_response)
  food          String?
  alcohol       String?
  accommodation String?
  count         Int     @default(1)
  user_id       String
  event_id      String
  group_id      String?

  user     User        @relation(fields: [user_id], references: [id])
  event    Event       @relation(fields: [event_id], references: [id])
  group    GuestGroup? @relation(fields: [group_id], references: [id])
  messages Message[]

  @@unique([user_id, event_id])
}

model GuestGroup {
  id      String   @id @default(uuid())
  name    String
  members String[] @default([])
  count   Int      @default(0)

  guests Guest[]
}

model Message {
  id       String   @id @default(uuid())
  message  String
  time     DateTime @default(now())
  event_id String
  guest_id String

  event Event @relation(fields: [event_id], references: [id], onDelete: Cascade)
  guest Guest @relation(fields: [guest_id], references: [id])
}