generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id                 String   @id @default(uuid())
  name               String
  dob                DateTime
  mobile_number      String   @unique
  email              String   @unique
  gender             Gender   @default(Unspecified)
  profile_pic        String?
  preferred_language Language @default(English)
  created_at         DateTime @default(now())
  hostedEvents       Event[]  @relation("HostEvents")
  guestRecords       Guest[]
  coHostedEvents     Event[]  @relation("CoHostEvents")
}

model Event {
  id                 String            @id @default(uuid())
  title              String
  type               EventType
  location           String
  address            String
  invite_message     String?
  image              String?
  created_at         DateTime          @default(now())
  start_date_time    DateTime
  end_date_time      DateTime?
  hostId             String
  bannerImage        String?
  visibility         Visibility        @default(Private)
  anniversaryDetails AnniversaryEvent?
  birthdayDetails    BirthdayEvent?
  host               User              @relation("HostEvents", fields: [hostId], references: [id])
  guests             Guest[]
  housePartyDetails  HousePartyEvent?
  messages           Message[]
  sub_events         SubEvent[]        @relation("ParentEvent")
  travelDetails      TravelEvent?
  weddingDetails     WeddingEvent?
  co_hosts           User[]            @relation("CoHostEvents")
}

model WeddingEvent {
  id                 String   @id
  bride_name         String
  bride_details      String?
  groom_name         String
  groom_details      String?
  bride_groom_images String[]
  hashtag            String?
  event              Event    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model BirthdayEvent {
  id           String  @id
  person_image String?
  hashtag      String?
  event        Event   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model HousePartyEvent {
  id    String   @id
  cost  Float?   @default(0.0)
  rules String?
  terms String?
  tags  String[]
  event Event    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model TravelEvent {
  id                 String   @id
  cost               Float?   @default(0.0)
  terms              String?
  itinerary_included String[]
  itinerary_excluded String[]
  rules              String?
  tags               String[]
  event              Event    @relation(fields: [id], references: [id], onDelete: Cascade)
}

model AnniversaryEvent {
  id               String  @id
  couple_names     String
  anniversary_year Int?
  couple_image     String?
  hashtag          String?
  event            Event   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model SubEvent {
  id              String   @id @default(uuid())
  title           String
  location        String
  address         String
  invite_message  String?
  image           String?
  start_date_time DateTime
  end_date_time   DateTime
  event_id        String?
  co_hosts        String[]
  guests          String[]
  messages        String[]
  parentEvent     Event?   @relation("ParentEvent", fields: [event_id], references: [id], onDelete: Cascade)
}

model Guest {
  id            String      @id @default(uuid())
  rsvp          RSVP        @default(no_response)
  food          String?
  alcohol       String?
  accommodation String?
  count         Int         @default(1)
  user_id       String
  event_id      String
  group_id      String?
  event         Event       @relation(fields: [event_id], references: [id])
  group         GuestGroup? @relation(fields: [group_id], references: [id])
  user          User        @relation(fields: [user_id], references: [id])
  messages      Message[]

  @@unique([user_id, event_id])
}

model GuestGroup {
  id      String   @id @default(uuid())
  name    String
  members String[] @default([])
  count   Int      @default(0)
  guests  Guest[]
}

model Message {
  id       String   @id @default(uuid())
  message  String
  time     DateTime @default(now())
  event_id String
  guest_id String
  event    Event    @relation(fields: [event_id], references: [id], onDelete: Cascade)
  guest    Guest    @relation(fields: [guest_id], references: [id])
}

enum Gender {
  M
  F
  Unspecified
}

enum RSVP {
  accepted
  declined
  maybe
  no_response
}

enum EventType {
  Wedding
  Birthday
  Anniversary
  Houseparty
  Travel
}

enum Language {
  English
  Hindi
}

enum Visibility {
  Public
  Private
}
