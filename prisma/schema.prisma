// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ENUMS
enum Gender {
  M
  F
  Unspecified
}

enum RSVP {
  accepted
  declined
  maybe
  no_response
}

enum EventType {
  Wedding
  Birthday
  Anniversary
  Houseparty
  Travel
}

// MODELS

model User {
  id                String    @id @default(uuid())
  name              String
  dob               DateTime
  mobile_number     String    @unique
  email             String?   @unique
  gender            Gender    @default(Unspecified)
  profile_pic       String
  preferred_language String   @default("eng")
  created_at        DateTime  @default(now())

  // Relations
  hostedEvents      Event[]   @relation("HostEvents")
  guestRecords      Guest[]
  coHostedEvents    Event[]   @relation("CoHostEvents")
}

model Event {
  id            String       @id @default(uuid())
  title         String
  type          EventType
  date_time     DateTime    // Changed to DateTime instead of just Time for better handling
  location      String
  address       String
  invite_message String?
  image         String
  created_at    DateTime     @default(now())

  // Foreign Keys
  hostId        String
  host          User         @relation("HostEvents", fields: [hostId], references: [id])
  
  // Arrays/Relations
  co_hosts      User[]       @relation("CoHostEvents")
  sub_events    SubEvent[]   @relation("ParentEvent")
  guests        Guest[]
  messages      Message[]
}

model SubEvent {
  id             String     @id @default(uuid())
  title          String
  date_time      DateTime   // Changed to DateTime
  location       String
  address        String
  invite_message String?
  image          String

  // Foreign Keys
  event_id       String?
  parentEvent    Event?     @relation("ParentEvent", fields: [event_id], references: [id])

  // Arrays
  co_hosts       String[]
  guests         String[]   // UUIDs of users, handled at app level
  messages       String[]   // UUIDs of messages, handled at app level
}

model Guest {
  id             String      @id @default(uuid())
  rsvp           RSVP        @default(no_response)
  food           String?
  alcohol        String?
  accommodation  String?
  count          Int         @default(1)

  // Foreign Keys
  user_id        String
  event_id       String
  group_id       String?

  user           User        @relation(fields: [user_id], references: [id])
  event          Event       @relation(fields: [event_id], references: [id])
  group          GuestGroup? @relation(fields: [group_id], references: [id])

  messages       Message[]
}

model GuestGroup {
  id       String   @id @default(uuid())
  name     String
  members  String[] @default([])
  count    Int      @default(0)

  Guest Guest[]
}

model Message {
  id        String    @id @default(uuid())
  message   String
  time      DateTime  @default(now())

  // Foreign Keys
  event_id  String
  guest_id  String

  event     Event     @relation(fields: [event_id], references: [id])
  guest     Guest     @relation(fields: [guest_id], references: [id])
}